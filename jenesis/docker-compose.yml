version: "3.9"
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jenesis_api
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - .:/app
      - /app/node_modules
    command: /bin/sh -c "rm -f tmp/pids/server.pid && npm run typeorm migration:run -- -d ./src/database/migration.config.ts && yarn start"
    ports:
      - "3000:3000"
    networks:
      - jenesis_link
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Define the Postgres service
  db:
    image: postgres:14.8
    restart: always
    container_name: jenesis_db
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_PORT=${DB_PORT}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_HOST_AUTH_METHOD=md5
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '15432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d jenesis -U root"]
      interval: 1s
      timeout: 3s
      retries: 10
      start_period: 5s
    networks:
      - jenesis_link

  # Define the Redis service
  redis:
    image: redis:5.0-alpine
    container_name: jenesis_redis
    volumes:
      - redis:/data
    ports:
      - "63799:6379"
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - jenesis_link
volumes:
  postgres:
  redis:
  postgres_data:

# docker network create jenesis_link
networks:
  jenesis_link:
    external: true
